# deploy.yml
name: Deploy FastAPI-Service

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.3'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to server
        id: deploy
        uses: appleboy/ssh-action@master
        continue-on-error: true
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB
          script: |
            cd /opt/FastAPI-Service

            echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ main"
            git fetch origin main --depth=1
            git reset --hard FETCH_HEAD
            git clean -xfd

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            docker compose -f Docker/docker-compose.yml down --remove-orphans

            # –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
            docker compose -f Docker/docker-compose.yml up -d --build

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            sleep 10  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            if ! docker compose -f Docker/docker-compose.yml ps | grep -q "running"; then
              echo "‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
              exit 1
            fi

            echo "‚úÖ Deployment completed"
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

      - name: Set CI status env
        run: |
          if [ "${{ steps.deploy.outcome }}" = "success" ]; then
            echo "STATUS=‚úÖ –£—Å–ø–µ—à–Ω–æ" >> $GITHUB_ENV
          else
            echo "STATUS=‚ùå –û—à–∏–±–∫–∞" >> $GITHUB_ENV
          fi

      - name: Prepare CI payload
        id: prepare_payload
        run: |
          echo "–°–æ–∑–¥–∞—ë–º JSON –¥–ª—è CI-—Ä–µ–ø–æ—Ä—Ç–∞"
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          echo '{
            "secret": "'"${{ secrets.CI_SECRET }}"'",
            "project": "'"${{ github.repository }}"'",
            "status": "'"$STATUS"'",
            "commit": "'"$(git rev-parse --short HEAD)"'",
            "author": "'"${{ github.actor }}"'",
            "branch": "'"${{ github.ref_name }}"'",
            "workflow": "'"${{ github.workflow }}"'",
            "event_name": "'"${{ github.event_name }}"'",
            "message": "'"$COMMIT_MSG"'",
            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "repo_url": "https://github.com/${{ github.repository }}"
          }' > ci_payload.json
          echo "payload_file=ci_payload.json" >> $GITHUB_OUTPUT

      - name: Send CI Report to Telegram Bot
        env:
          CI_ENDPOINT: ${{ secrets.CI_ENDPOINT }}
        run: |
          echo "üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CI-–æ—Ç—á—ë—Ç..."
          PAYLOAD_FILE="${{ steps.prepare_payload.outputs.payload_file }}"
          echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: $PAYLOAD_FILE"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$CI_ENDPOINT" \
            -H "Content-Type: application/json" \
            -d @"$PAYLOAD_FILE")

          echo "HTTP_CODE=$HTTP_CODE"
          if [[ "$HTTP_CODE" -ne 200 ]]; then
            echo "::warning::CI report failed with HTTP $HTTP_CODE"
            exit 1
          else
            echo "‚úÖ CI-–æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: $HTTP_CODE"
          fi